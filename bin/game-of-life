#!/usr/bin/env perl6
use v6;

class Board {
    has Array[Bool] @.columns;

    has Bool $.mutable is rw = True;

    has $.origin-x = 0;
    has $.origin-y = 0;

    has $.left = 0;
    has $.top = 0;
    has $.right = 0;
    has $.bottom = 0;

    method width() { $!right - $!left + 1 }
    method height() { $!bottom - $!top + 1 }

    method TWEAK() {
        @!columns.push: Array[Bool].new(False);
    }

    method clone(*%twiddles) {
        without %twiddles<columns> {
            %twiddles<columns> = Array[Array[Bool]].clone;
            for @!columns.kv -> $i, $v {
                %twiddles<columns>[$i] = $v.clone;
            }
        }

        callwith(|%twiddles);
    }

    method !expand-left($by) {
        #note "EXPAND-LEFT $by";
        @!columns.prepend(
            Array[Bool].new(False xx self.height) xx $by
        );
        $!left -= $by;
    }

    method !expand-right($by) {
        #note "EXPAND-RIGHT $by";
        @!columns.append(
            Array[Bool].new(False xx self.height) xx $by
        );
        $!right += $by;
    }

    method !expand-up($by) {
        #note "EXPAND-UP $by";
        for @!columns -> @cells {
            @cells.prepend(False xx $by);
        }
        $!top -= $by;
    }

    method !expand-down($by) {
        #note "EXPAND-DOWN $by";
        for @!columns -> @cells {
            @cells.append(False xx $by);
        }
        $!bottom += $by;
    }

    method !real-coords($x, $y) {
        if $!mutable {
            if $x < $!left {
                self!expand-left($!left - $x);
            }
            elsif $x > $!right {
                self!expand-right($x - $!right);
            }

            if $y < $!top {
                self!expand-up($!top - $y);
            }
            elsif $y > $!bottom {
                self!expand-down($y - $!bottom);
            }
        }

        ($x - $!left, $y - $!top);
    }

    method !lookup($x, $y) is rw {
        state $throw-away = False;

        if !$!mutable && ($x < $!left || $x > $!right || $y < $!top || $y > $!bottom) {
            $throw-away = False;
            return-rw $throw-away;
        }
        else {
            my ($rx, $ry) = self!real-coords($x, $y);
            return-rw @!columns[$rx][$ry];
        }
    }

    method cell($x, $y) { self!lookup($x, $y) }

    method raise($x, $y) {
        die "This board has been marked immutable." unless $!mutable;
        #note "RAISE ($x, $y)";
        self!lookup($x, $y)++;
    }

    method kill($x, $y) {
        die "This board has been marked immutable." unless $!mutable;
        #note "KILL  ($x, $y)";
        self!lookup($x, $y)--;
    }

    method neighbors($x, $y) {
        gather {
            take self.cell($x, $y - 1);
            take self.cell($x + 1, $y - 1);
            take self.cell($x + 1, $y);
            take self.cell($x + 1, $y + 1);
            take self.cell($x, $y + 1);
            take self.cell($x - 1, $y + 1);
            take self.cell($x - 1, $y);
            take self.cell($x - 1, $y - 1);
        }
    }

    method living-extents(Bool :$extend = False) {
        my ($ll, $lr, $lt, $lb) = ($!right, $!left, $!bottom, $!top);
        for $!left .. $!right -> $x {
            for $!top .. $!bottom -> $y {
                if self.cell($x, $y) {
                    $ll min= $x;
                    $lr max= $x;
                    $lt min= $y;
                    $lb max= $y;
                }
            }
        }

        # Make sure the available extents are one wider than this
        if $extend {
            die "Cannot extend immutable board." unless $!mutable;

            if $ll == $!left   { self!expand-left(1)  }
            if $lt == $!top    { self!expand-up(1)    }
            if $lr == $!right  { self!expand-right(1) }
            if $lb == $!bottom { self!expand-down(1)  }
        }

        ($ll, $lt, $lr, $lb);
    }
}

class Life {
    has Board $.current .= new;
    has Board $.next;

    has Str $.start-state = q:to/END_OF_DEFAULT_START_STATE/;

    XXXXX  XXXX   X   XXXXX   X   X   x
      X   x      X X    X    X X  X   X
      X   X     X   X   X   X   X X   X
      X    xxx  XXXXX   X   XXXXX XXXXX
      X       X X   X   X   X   X X   X
      X       X X   X   X   X   X X   X
      X       X X   X   X   X   X X   X
    XXXXX XXXX  X   X XXXXX X   X X   X

    END_OF_DEFAULT_START_STATE
    # has Str $.start-state = q:to/END_OF_DEFAULT_START_STATE/;
    #
    #                          X
    #                        X X
    #              XX      XX            XX
    #             X   X    XX            XX
    #  XX        X     X   XX
    #  XX        X   X XX    X X
    #            X     X       X
    #             X   X
    #              XX
    #
    # END_OF_DEFAULT_START_STATE

    method TWEAK() {
        my $x = 0;
        my $y = 0;
        for $!start-state.comb -> $v {
            if $v ~~ /\n/ {
                $y++;
                $x = 0;
                next;
            }

            $!current.raise($x, $y) if $v ~~ /\S/;
            $x++;
        }

        $!current.mutable = False;
    }

    #| Evaluate the current board and make updates to the next. The next board
    #| is a clone of the current board, so we just make changes.
    #|
    #| The C<$l>, C<$t>, C<$r>, C<$b> items are the top-left and botto-rigth
    #| corner coordinates of the grid to work on. This modifies the C<$.next>
    #| board in place so there's no return value.
    method next-turn-for($l, $t, $r, $b) {
        for $l..$r -> $x {
            for $t..$b -> $y {

                # Is the cell currently live?
                my $live      = $!current.cell($x, $y);

                # How many live neighbors does it currently have?
                my $neighbors = [+] $!current.neighbors($x, $y);

                # If alive and has too many or too few neighbors, die.
                if $live && !(2 <= $neighbors <= 3) {
                    $!next.kill($x, $y);
                }

                # if dead and has the right number of neighbors, come to life.
                elsif !$live && $neighbors == 3 {
                    $!next.raise($x, $y);
                }
            }
        }
    }

    method next-turn() {
        $!next = $!current.clone(mutable => True);

        my ($l, $t, $r, $b) = $!current.living-extents;

        self.next-turn-for($l-1, $t-1, $r+1, $b+1);

        $!current = $!next;
        $!current.mutable = False;
    }

    method parallel-next-turn-for($l, $t, $r, $b) {
        my @jobs = gather {
            if $r - $l > 20 {
                my $m = ceiling($l + ($r - $l)/2);
                #dd $l, $m, $r;

                take start self.parallel-next-turn-for($l, $t, $m - 1, $b);
                take start self.parallel-next-turn-for($m, $t, $r, $b);
            }

            elsif $b - $t > 20 {
                my $m = ceiling($t + ($b - $t)/2);
                #dd $t, $m, $b;

                take start self.parallel-next-turn-for($l, $t, $r, $m - 1);
                take start self.parallel-next-turn-for($l, $m, $r, $b);
            }

            else {
                take start self.next-turn-for($l, $t, $r, $b);
            }
        }

        await Promise.allof(@jobs);
    }

    method parallel-next-turn() {
        $!next = $!current.clone(mutable => True);

        my ($l, $t, $r, $b) = $!next.living-extents(:expand);

        await start self.parallel-next-turn-for($l-1, $t-1, $r+1, $b+1);

        $!current = $!next;
        $!current.mutable = False;
    }

    method board() { $!current }
}

sub render-text(Board $board) {
    my ($l, $t, $r, $b) = $board.living-extents;
    for ($t-1) .. ($b+1) -> $y {
        for ($l-1) .. ($r+1) -> $x {
            print $board.cell($x, $y) ?? "X" !! " ";
        }
        print "\n";
    }
}

use SDL2::Raw;

my $gwidth = 800;
my $gheight = 800;

my $window;
my $render;
my $event;

sub render-graphics(Board $board) {
    SDL_SetRenderDrawColor($render, 0, 0, 0, 0);
    SDL_RenderClear($render);

    while SDL_PollEvent($event) {
        if $event.type == QUIT {
            return True;
        }
    }

    SDL_SetRenderDrawColor($render, 255, 255, 255, 255);

    my $max-box-width  = $gwidth / $board.width;
    my $max-box-height = $gheight / $board.height;
    my $box-size       = $max-box-width min $max-box-height;

    my ($l, $t, $r, $b) = $board.living-extents;
    for ($t-1) .. ($b+1) -> $y {
        for ($l-1) .. ($r+1) -> $x {
            next unless $board.cell($x, $y);

            my $gx = $x - $l + 1;
            my $gy = $y - $t + 1;

            SDL_RenderFillRect($render,
                SDL_Rect.new(
                    $gx * $box-size,
                    $gy * $box-size,
                    $box-size,
                    $box-size,
                )
            );
        }
    }

    SDL_RenderPresent($render);

    return False;
}

sub initialize-graphics() {
    die "couldn't initialize SDL2: { SDL_GetError }"
        if SDL_Init(VIDEO) != 0;

    $window = SDL_CreateWindow(
        "Conway's Game of Life",
        SDL_WINDOWPOS_CENTERED_MASK,
        SDL_WINDOWPOS_CENTERED_MASK,
        $gwidth, $gheight,
        OPENGL
    );
    $render = SDL_CreateRenderer($window, -1, ACCELERATED +| PRESENTVSYNC);

    $event = SDL_Event.new;
}

sub initialize-renderer(Bool $graphics, Promise $done --> Supplier) {
    my $render = Supplier.new;
    start {
        react {
            whenever $render.Supply -> (Int $i, Board $board) {
                if $graphics {
                    if render-graphics($board) {
                        $done.keep;
                    }
                }
                else {
                    render-text($board);

                    say "--- $i " ~ '-' x (3 max ($board.width - $i.Str.chars - 5));
                }
            }
        }
    }

    $render;
}

sub initialize-game-of-life(Bool $parallel) {
    my $game = Life.new;

    if $parallel {
        supply {
            for 0..* -> $i {
                emit( ($i, $game.board) );
                $game.parallel-next-turn;
            }
        }
    }
    else {
        supply {
            for 0..* -> $i {
                emit( ($i, $game.board) );
                $game.next-turn;
            }
        }
    }
}

sub MAIN(Int :$steps = -1, Bool :$parallel = False, Bool :$graphics = False) {
	initialize-graphics if $graphics;

    my Promise $done .= new;
    my Supplier $render = initialize-renderer($graphics, $done);
    my Supply $turn = initialize-game-of-life($parallel);

    react {
        whenever $turn -> (Int $i, Board $board) {
            $render.emit: ($i, $board);

            if $steps >= 0 && $i >= $steps {
                $done.keep;
            }
        }

        whenever signal(SIGINT, SIGQUIT) {
            $done.keep;
        }

        whenever $done {
            done;
        }
    }
}
