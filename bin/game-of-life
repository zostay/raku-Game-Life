#!/usr/bin/env perl6
use v6;

use Game::Life::Board :board;
use Game::Life;
use Game::Life::Renderer;
use Game::Life::Player;
use Game::Life::Player::Basic;
use Game::Life::Player::DivideAndConquer;

sub initialize-renderer(Bool $graphics, Promise $done --> Supplier) {
    my $render = Supplier.new;
    start {
        react {
            whenever $render.Supply -> (Int $i, Board $board) {
                if $graphics {
                    if render-graphics($board) {
                        $done.keep;
                    }
                }
                else {
                    render-text($board);

                    say "--- $i " ~ '-' x (3 max ($board.width - $i.Str.chars - 5));
                }
            }
        }
    }

    $render;
}

sub initialize-game-of-life(Bool $parallel) {
    my $player = do if $parallel {
        Game::Life::Player::DivideAndConquer.new;
    }
    else {
        Game::Life::Player::Basic.new;
    }

    my $game = Game::Life.new(:$player);

    supply {
        for 0..* -> $i {
            emit( ($i, $game.board) );
            $game.next-turn;
        }
    }
}

sub MAIN(Int :$steps = -1, Bool :$parallel = False, Bool :$graphics = False) {
	initialize-graphics if $graphics;

    my Promise $done .= new;
    my Supplier $render = initialize-renderer($graphics, $done);
    my Supply $turn = initialize-game-of-life($parallel);

    react {
        whenever $turn -> (Int $i, Board $board) {
            $render.emit: ($i, $board);

            if $steps >= 0 && $i >= $steps {
                $done.keep;
            }
        }

        whenever signal(SIGINT, SIGQUIT) {
            $done.keep;
        }

        whenever $done {
            done;
        }
    }
}
